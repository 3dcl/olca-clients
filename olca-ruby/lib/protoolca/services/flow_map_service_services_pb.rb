# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: flow_map_service.proto for package 'protolca.services'

require 'grpc'
require 'flow_map_service_pb'

module Protolca
  module Services
    module FlowMapService
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'protolca.services.FlowMapService'

        # Delete the flow map with the given name.
        rpc :Delete, ::Protolca::Services::ProtoFlowMapName, ::Google::Protobuf::Empty
        # Get the flow map with the given name form the database.
        rpc :Get, ::Protolca::Services::ProtoFlowMapName, ::Protolca::ProtoFlowMap
        # Get the information (basically just the names) of all flow maps that are
        # available in the database.
        rpc :GetAll, ::Google::Protobuf::Empty, stream(::Protolca::Services::ProtoFlowMapName)
        # Inserts the given flow map into the database. It overwrites an existing
        # flow map if there is a flow map with the same name already available in the
        # database.
        rpc :Put, ::Protolca::ProtoFlowMap, ::Google::Protobuf::Empty
      end

      Stub = Service.rpc_stub_class
    end
  end
end
