syntax = "proto3";
package protolca.services;

option csharp_namespace = "ProtoLCA.Services";
option go_package = ".;protolca";
option java_package = "org.openlca.proto.grpc";
option java_multiple_files = true;
option java_outer_classname = "DataFetchProto";

import "commons.proto";
import "google/protobuf/empty.proto";
import "olca.proto";

service DataFetchService {

  // Get a data set by ID. You use this method if you are sure that a data set
  // of the requested type and ID exists in the database. An error is returned
  // if this is not the case.
  rpc Get(GetRequest) returns (ProtoDataSet);

  // Get a data set by ID or name. Returns an empty data set if there is no such
  // data set in the database. If there are multiple data sets with the same
  // name in the database it returns the first of these data sets.
  rpc Find(FindRequest) returns (ProtoDataSet);

  // Get (a page of) all data sets of a given type. If no page size is given
  // (page <= 0) it defaults to 100. An unset page (page <= 0) defaults to the
  // first page.
  rpc GetAll(GetAllRequest) returns (GetAllResponse);

  // Get the number of data sets of the given model type
  // that are stored in the database.
  rpc GetCount(GetCountRequest) returns (GetCountResponse);

  // Get all descriptors that match the given request.
  rpc GetDescriptors(GetDescriptorsRequest) returns (stream ProtoRef);

  // Search for data sets.
  rpc Search(SearchRequest) returns (stream ProtoRef);

  // Get the descriptors of the data sets that are contained in a given
  // category. The category can be identified by its full path or its ID where
  // an empty string or "/" identifies the root category (or "none-category") of
  // the respective model type.
  rpc GetCategoryContent(GetCategoryContentRequest) returns (stream ProtoRef);

  // Get the full category tree for the given model type.
  rpc GetCategoryTree(GetCategoryTreeRequest) returns (CategoryTree);

  // Get possible providers for the given flow. For products these are processes
  // with that product on the output side and for waste flows processes with
  // that waste flow on the input side. For elementary flows, an empty stream is
  // returned.
  rpc GetProvidersFor(ProtoRef) returns (stream ProtoRef);

  // Get all technosphere flows from the database. These are all process-flow
  // pairs that can be used as providers for product inputs or waste outputs in
  // other processes or product systems.
  rpc GetTechFlows(google.protobuf.Empty) returns (stream ProtoTechFlow);

}

message GetRequest {
  ProtoType type = 1;
  string id = 2;
}

message FindRequest {

  ProtoType type = 1;

  oneof by {
    string id = 2;
    string name = 3;
  }
}

// The request message for getting all data sets of a given type from the
// database. As there can be thousands of data set of that type in the database
// the response is paged by default. Unless specified otherwise, the first page
// with the first 100 data sets is returned by default.
message GetAllRequest {

  // The type of the requested data sets.
  ProtoType type = 1;

  // The number of data sets that should be returned per response page (defaults
  // to 100)
  int32 page_size = 2;

  // Paging is optional and all data sets of the requested type are returned
  // when the `skip_paging` property is set to true.
  oneof paging {

    // The requested page of the data set (defaults to 1).
    int32 page = 3;

    // If set to true, all data sets of the given type will be returned in a
    // single response.
    bool skip_paging = 4;
  }
}

message GetAllResponse {
  ProtoType type = 1;
  int32 total_count = 2;
  int32 page_size = 3;
  int32 page = 4;
  repeated ProtoDataSet data_set = 5;
}

message SearchRequest {

  // The model type of the searched entities.
  ProtoType type = 1;

  // The search query.
  string query = 2;
}

message GetDescriptorsRequest {

  message Attributes {

    // The name of the requested descriptor(s).
    string name = 1;

    // The ID or full path of the category. The string "/" identifies the root
    // or none-category which means that this will filter for descriptors that
    // do not have a specific category set.
    string category = 2;
  }

  // The model type of the requested descriptor(s).
  ProtoType type = 1;

  oneof by {
    // The ID of the requested descriptor. Setting this field means that you
    // typically want one specific descriptor.
    string id = 2;

    Attributes attributes = 3;
  }
}

message GetCategoryContentRequest {
  ProtoType type = 1;
  string category = 2;
}

message GetCategoryTreeRequest {
  ProtoType type = 1;
}

message CategoryTree {
  ProtoType type = 1;
  string id = 2;
  string name = 3;
  repeated CategoryTree sub_tree = 4;
}

message GetCountRequest {
  ProtoType type = 1;
}

message GetCountResponse {
  int32 count = 1;
}
